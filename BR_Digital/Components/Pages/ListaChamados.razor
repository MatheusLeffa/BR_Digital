@page "/lista-chamados"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager

<PageTitle>Lista de chamados</PageTitle>

<div class="table-responsive">
    <table id="myTable" class="table table-bordered table-hover table-sm">
        <thead>
            <tr>
                <th>Chamado</th>
                <th>Cliente</th>
                <th>Trecho</th>
                <th>Status</th>
                <th>Tipo</th>
                <th>Abertura</th>
                <th>Interação</th>
                <th>Opções</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Chamado chamado in ListaChamado)
            {
                <tr class="@GetRowsColor(chamado.Status)">
                    <td>@chamado.CodigoChamado</td>
                    <td>@chamado.Cliente.Nome</td>
                    <td>@chamado.Trecho</td>
                    <td>@chamado.Status</td>
                    <td>@chamado.Tipo</td>
                    <td data-order="@chamado.Abertura.ToString("yyyy-MM-dd HH:mm:ss")">
                        @chamado.Abertura.ToString("dd/MM/yyyy HH:mm:ss")
                    </td>
                    <td>@chamado.Interacao</td>
                    <td>
                        <button type="button" class="btn btn-primary btn-sm" title="Editar"><i class="bi bi-pencil-square"></i></button>
                        <button type="button" class="btn btn-danger btn-sm" title="Apagar" onclick="@(() => ConfirmDelete(chamado))"><i class="bi bi-trash3"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public List<Chamado> ListaChamado { get; set; } = [];

    protected override void OnInitialized()
    {
        ListaChamado = ChamadoRepository.GetListaChamados();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeDataTable");
        }
    }

    private string GetRowsColor(string status)
    {
        return status switch
        {
            "Critico" => "table-danger",
            "Importante" => "table-warning",
            "Resolvido" => "table-success",
            _ => ""
        };
    }

    private async Task ConfirmDelete(Chamado chamado)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Tem certeza que deseja excluir o chamado {chamado.CodigoChamado}?");

        if (confirmed)
        {
            // Remove o chamado
            ChamadoRepository.DeleteChamado(chamado);
            _navigationManager.NavigateTo(uri: "/lista-chamados", forceLoad: true);
        }
    }
}

<script>
    var table;
    function initializeDataTable() {
        table = $('#myTable').DataTable({
            responsive: true,
            order: [[5, "desc"]],
            language: {
                url: 'https://cdn.datatables.net/plug-ins/1.11.5/i18n/pt-BR.json'
            },
            columnDefs: [
                { orderable: false, targets: -1 }
            ],
        });
    }
</script>