@page "/lista-chamados"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager
@implements IDisposable

<PageTitle>Lista de chamados</PageTitle>

@if (IsLoading)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Carregando...</span>
        </div>
    </div>
}

<div hidden="@IsLoading">
    <table id="myTable" class="table table-bordered table-hover table-sm">
        <thead>
            <tr>
                <th></th>
                <th></th>
                <th>Chamado</th>
                <th>Cliente</th>
                <th>Trecho</th>
                <th>Status</th>
                <th>Tipo</th>
                <th>Abertura</th>
                <th>Interação</th>
                <th>Opções</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Chamado chamado in ListaChamado)
            {
                <tr class="@GetRowsColor(chamado.Status)" data-id="@chamado.CodigoChamado">
                    <td></td>
                    <td class="dt-control"></td>
                    <td>@chamado.CodigoChamado</td>
                    <td>@chamado.Cliente.Nome</td>
                    <td>@chamado.Trecho</td>
                    <td>@chamado.Status</td>
                    <td>@chamado.Tipo</td>
                    <td data-order="@chamado.Abertura.ToString("yyyy-MM-dd HH:mm:ss")">
                        @chamado.Abertura.ToString("dd/MM/yyyy HH:mm:ss")
                    </td>
                    <td>@chamado.Interacao</td>
                    <td>
                        <button type="button" class="btn btn-primary btn-sm" title="Editar" @onclick="() => OnEditClick(chamado)" disabled="@IsLoading">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button type="button" class="btn btn-danger btn-sm" title="Apagar" @onclick="() => ConfirmDelete(chamado)" disabled="@IsLoading">
                            <i class="bi bi-trash3"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public List<Chamado> ListaChamado { get; set; } = [];
    private DotNetObjectReference<ListaChamados>? dotNetHelper;
    private bool IsLoading = true;

    protected override void OnInitialized()
    {
        IsLoading = true;
        // Inicialmente, carrega apenas os não concluídos
        ListaChamado = ChamadoRepository.GetListaChamados()
            .Where(c => c.Status != "Concluido")
            .ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await ReinitializeDataTable();
                IsLoading = false;
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                await Console.Error.WriteLineAsync($"Error initializing DataTable: {ex.Message}");
                IsLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    private string GetRowsColor(string status)
    {
        return status switch
        {
            "Critico" => "table-danger",
            "Importante" => "table-warning",
            "Concluido" => "table-success",
            "Fechado" => "table-secondary",
            _ => ""
        };
    }

    private async Task ConfirmDelete(Chamado chamado)
    {
        try 
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Tem certeza que deseja excluir o chamado {chamado.CodigoChamado}?");

            if (confirmed)
            {
                IsLoading = true;
                await InvokeAsync(StateHasChanged);

                // Delete the chamado
                ChamadoRepository.DeleteChamado(chamado);
                
                // Instead of manually updating the list and reinitializing DataTable,
                // navigate to the same page which will trigger a full reload
                _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            await Console.Error.WriteLineAsync($"Error deleting chamado: {ex.Message}");
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnEditClick(Chamado chamado)
    {
        // Logic for editing the chamado
    }

    [JSInvokable]
    public List<Chamado> GetMultiplosChamadosJS(int[] codigosChamado)
    {
        var resultado = new List<Chamado>();
        foreach (var codigo in codigosChamado)
        {
            var chamado = ChamadoRepository.GetChamadoByCodigo(codigo);
            if (chamado != null)
            {
                resultado.Add(chamado);
            }
        }
        return resultado;
    }

    [JSInvokable]
    public object? GetChamadoDetalhesJS(int codigoChamado)
    {
        var chamado = ChamadoRepository.GetChamadoByCodigo(codigoChamado);
        if (chamado == null) return null;

        return new
        {
            codigoChamado = chamado.CodigoChamado,
            descricao = "Teste descrição do chamado.",
            responsavel = "Teste responsável do chamado.",
            ultimaAtualizacao = DateTime.Now,
            historico = "Histórico não disponível."
        };
    }

    [JSInvokable]
    public async Task AtualizarListaChamados(bool mostrarConcluidos)
    {
        try
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);

            if (mostrarConcluidos)
            {
                ListaChamado = ChamadoRepository.GetListaChamados();
            }
            else
            {
                ListaChamado = ChamadoRepository.GetListaChamados()
                    .Where(c => c.Status != "Concluido")
                    .ToList();
            }

            await ReinitializeDataTable();
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    [JSInvokable]
    public async Task<bool> ApagarMultiplosChamadosJS(int[] codigosChamado)
    {
        try 
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Tem certeza que deseja excluir {codigosChamado.Length} chamado(s)?");

            if (confirmed)
            {
                IsLoading = true;
                await InvokeAsync(StateHasChanged);

                foreach (var codigo in codigosChamado)
                {
                    var chamado = ChamadoRepository.GetChamadoByCodigo(codigo);
                    if (chamado != null)
                    {
                        ChamadoRepository.DeleteChamado(chamado);
                    }
                }

                // Instead of manually updating the list and reinitializing DataTable,
                // navigate to the same page which will trigger a full reload
                _navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
                return true;
            }

            return false;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao excluir chamados: {ex.Message}");
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
            return false;
        }
    }

    private async Task ReinitializeDataTable()
    {
        // First, ensure the table is destroyed in JavaScript
        await JSRuntime.InvokeVoidAsync("destroyDataTable");
        
        // Then dispose the old reference
        if (dotNetHelper != null)
        {
            var oldHelper = dotNetHelper;
            dotNetHelper = null;
            oldHelper.Dispose();
        }

        // Create new reference and initialize
        dotNetHelper = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("initializeDataTable", dotNetHelper);
    }
}

<script>
    var table;

    // Define formatDetails function before it's used
    function formatDetails(chamado) {
        return `
            <div class="p-3">
                <table class="table table-sm table-bordered">
                    <tr><th>Descrição:</th><td>${chamado.descricao || 'N/A'}</td></tr>
                    <tr><th>Responsável:</th><td>${chamado.responsavel || 'N/A'}</td></tr>
                    <tr><th>Última Atualização:</th><td>${new Date(chamado.ultimaAtualizacao).toLocaleString()}</td></tr>
                    <tr><th>Histórico:</th><td>${chamado.historico || 'Sem histórico'}</td></tr>
                </table>
            </div>
        `;
    }

    function initializeDataTable(dotNetHelper) {
        // Wait for jQuery and DataTables to be ready
        if (typeof $ === 'undefined' || typeof $.fn.DataTable === 'undefined') {
            requestAnimationFrame(() => initializeDataTable(dotNetHelper));
            return;
        }

        try {
            // Ensure any existing instance is properly destroyed
            destroyDataTable();

            // Ensure table exists before initializing
            if (!$('#myTable').length) {
                console.error("Table element not found in DOM");
                return;
            }

            // Initialize DataTable
            table = $('#myTable').DataTable({
                responsive: true,
                processing: true,
                fixedHeader: {
                    header: true,
                    footer: false
                },
                order: [[7, 'asc']],
                lengthMenu: [25, 50, 100],
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.11.5/i18n/pt-BR.json'
                },
                columnDefs: [
                    {
                        orderable: false,
                        render: DataTable.render.select(),
                        targets: 0
                    },
                    {
                        className: 'dt-control',
                        orderable: false,
                        targets: 1
                    }
                ],
                select: {
                    style: 'multi',
                    selector: 'td:first-child',
                    info: false
                },
                layout: {
                    top2start: {
                        buttons: [
                            {
                                extend: 'searchPanes',
                                config: {
                                    cascadePanes: true,
                                    collapse: false,
                                    preSelect: [
                                        {
                                            rows: ["Critico", "Importante", "Normal"],
                                            column: 5
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    topEnd: {
                        buttons: [
                            {
                                text: "Responder Cliente",
                                className: 'btn-resposta mx-1 rounded-2 d-none',
                                action: function () {
                                    var rowsSelected = table.rows({ selected: true }).data();
                                    if (rowsSelected.length === 0) {
                                        alert("Nenhum chamado selecionado!");
                                        return;
                                    }

                                    // Coletar todos os códigos de chamado selecionados
                                    var codigosChamado = [];
                                    for (var i = 0; i < rowsSelected.length; i++) {
                                        codigosChamado.push(parseInt(rowsSelected[i][2]));
                                    }

                                    dotNetHelper.invokeMethodAsync("GetMultiplosChamadosJS", codigosChamado)
                                        .then(chamados => {
                                            console.log("Chamados encontrados:", chamados);
                                            var mensagem = "Chamados selecionados:\n\n";
                                            chamados.forEach(chamado => {
                                                mensagem += `• ${chamado.codigoChamado} - ${chamado.cliente.nome} (${chamado.status})\n`;
                                            });
                                            alert(mensagem);
                                        })
                                        .catch(error => {
                                            console.error("Erro ao buscar chamados:", error);
                                        });
                                }
                            },
                            {
                                text: "Apagar",
                                className: 'btn-apagar bg-danger rounded-2 d-none',
                                action: function () {
                                    var rowsSelected = table.rows({ selected: true }).data();
                                    if (rowsSelected.length === 0) {
                                        alert("Nenhum chamado selecionado!");
                                        return;
                                    }

                                    // Coletar todos os códigos de chamado selecionados
                                    var codigosChamado = [];
                                    for (var i = 0; i < rowsSelected.length; i++) {
                                        codigosChamado.push(parseInt(rowsSelected[i][2]));
                                    }

                                    dotNetHelper.invokeMethodAsync("ApagarMultiplosChamadosJS", codigosChamado)
                                        .then(chamadosApagados => {
                                            if(chamadosApagados) {
                                                alert("Chamados apagados com sucesso!");
                                            }
                                        })
                                        .catch(error => {
                                            console.error("Erro ao apagar chamados:", error);
                                        });
                                }
                            }
                        ],
                        search: {
                            search: true,
                            placeholder: 'Pesquisar'
                        }
                    }
                },
                drawCallback: function() {
                    // Add event handlers after table is drawn
                    initializeEventHandlers(dotNetHelper);
                }
            });
            
            console.log("DataTable initialized successfully");
        } catch (error) {
            console.error("Error initializing DataTable:", error);
        }
    }

    // Separate function for event handlers
    function initializeEventHandlers(dotNetHelper) {
        $(document).off('change', '#mostrarConcluidosBtn').on('change', '#mostrarConcluidosBtn', function() {
            var mostrarConcluidos = $(this).is(':checked');
            dotNetHelper.invokeMethodAsync('AtualizarListaChamados', mostrarConcluidos);
        });

        // Update the select/deselect event handler
        table.on('select deselect', function () {
            var selectedRows = table.rows({ selected: true }).count();
            var responderButton = document.querySelector('.dt-buttons .btn-resposta');
            var apagarButton = document.querySelector('.dt-buttons .btn-apagar');

            if (responderButton && apagarButton) {
                if (selectedRows > 0) {
                    responderButton.classList.remove('d-none');
                    apagarButton.classList.remove('d-none');
                } else {
                    responderButton.classList.add('d-none');
                    apagarButton.classList.add('d-none');
                }
            }
        });

        // Evento para mostrar/esconder child rows
        $('#myTable tbody').on('click', 'td.dt-control', function () {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            var icon = $(this).find('i');
            var chamadoId = parseInt(tr.attr('data-id')); // Obter o ID do atributo data-id

            if (row.child.isShown()) {
                row.child.hide();
                icon.removeClass('bi-dash-circle').addClass('bi-plus-circle');
            } else {
                icon.removeClass('bi-plus-circle').addClass('bi-arrow-clockwise');

                dotNetHelper.invokeMethodAsync("GetChamadoDetalhesJS", chamadoId)
                    .then(chamado => {
                        if (chamado) {
                            row.child(formatDetails(chamado)).show();
                            icon.removeClass('bi-arrow-clockwise').addClass('bi-dash-circle');
                        } else {
                            icon.removeClass('bi-arrow-clockwise').addClass('bi-plus-circle');
                        }
                    })
                    .catch(error => {
                        console.error("Erro ao buscar detalhes:", error);
                        icon.removeClass('bi-arrow-clockwise').addClass('bi-plus-circle');
                    });
            }
        });
    }

    function destroyDataTable() {
        try {
            if ($.fn.DataTable.isDataTable('#myTable')) {
                // Remove all event handlers
                $('#myTable tbody').off();
                $(document).off('change', '#mostrarConcluidosBtn');
                
                // Clear and destroy the table
                var dt = $('#myTable').DataTable();
                dt.clear();
                dt.destroy();
                
                // Remove any remaining DataTables-specific elements
                $('.dt-buttons').remove();
                $('.dataTables_filter').remove();
                $('.dataTables_info').remove();
                $('.dataTables_paginate').remove();
                $('.dataTables_length').remove();
                
                // Clear the table's tbody
                $('#myTable tbody').empty();
                
                table = null;
            }
        } catch (error) {
            console.error("Error destroying DataTable:", error);
        }
    }
</script>