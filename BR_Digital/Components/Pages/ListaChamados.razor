@page "/lista-chamados"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject NavigationManager _navigationManager
@implements IDisposable

<PageTitle>Lista de chamados</PageTitle>

<div class="">
    <table id="myTable" class="table table-bordered table-hover table-sm">
        <thead>
            <tr>
                <th></th>
                <th></th>
                <th>Chamado</th>
                <th>Cliente</th>
                <th>Trecho</th>
                <th>Status</th>
                <th>Tipo</th>
                <th>Abertura</th>
                <th>Interação</th>
                <th>Opções</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Chamado chamado in ListaChamado)
            {
                <tr class="@GetRowsColor(chamado.Status)" data-id="@chamado.CodigoChamado">
                    <td></td>
                    <td class="dt-control"></td>
                    <td>@chamado.CodigoChamado</td>
                    <td>@chamado.Cliente.Nome</td>
                    <td>@chamado.Trecho</td>
                    <td>@chamado.Status</td>
                    <td>@chamado.Tipo</td>
                    <td data-order="@chamado.Abertura.ToString("yyyy-MM-dd HH:mm:ss")">
                        @chamado.Abertura.ToString("dd/MM/yyyy HH:mm:ss")
                    </td>
                    <td>@chamado.Interacao</td>
                    <td>
                        <button type="button" class="btn btn-primary btn-sm" title="Editar"><i class="bi bi-pencil-square"></i></button>
                        <button type="button" class="btn btn-danger btn-sm" title="Apagar" onclick="@(() => ConfirmDelete(chamado))"><i class="bi bi-trash3"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public List<Chamado> ListaChamado { get; set; } = [];
    // Adicione esta propriedade para referência do DotNetObject
    private DotNetObjectReference<ListaChamados>? dotNetHelper;

    protected override void OnInitialized()
    {
        ListaChamado = ChamadoRepository.GetListaChamados();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("initializeDataTable", dotNetHelper);
        }
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    private string GetRowsColor(string status)
    {
        return status switch
        {
            "Critico" => "table-danger",
            "Importante" => "table-warning",
            "Concluido" => "table-success",
            _ => ""
        };
    }

    private async Task ConfirmDelete(Chamado chamado)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Tem certeza que deseja excluir o chamado {chamado.CodigoChamado}?");

        if (confirmed)
        {
            // Remove o chamado
            ChamadoRepository.DeleteChamado(chamado);
            _navigationManager.NavigateTo(uri: "/lista-chamados", forceLoad: true);
        }
    }

    [JSInvokable]
    public List<Chamado> GetMultiplosChamadosJS(int[] codigosChamado)
    {
        var resultado = new List<Chamado>();
        foreach (var codigo in codigosChamado)
        {
            var chamado = ChamadoRepository.GetChamadoByCodigo(codigo);
            if (chamado != null)
            {
                resultado.Add(chamado);
            }
        }
        return resultado;
    }

    [JSInvokable]
    public object? GetChamadoDetalhesJS(int codigoChamado)
    {
        var chamado = ChamadoRepository.GetChamadoByCodigo(codigoChamado);
        if (chamado == null) return null;

        return new
        {
            codigoChamado = chamado.CodigoChamado,
            descricao = "Teste descrição do chamado.",
            responsavel = "Teste responsável do chamado.",
            ultimaAtualizacao = DateTime.Now,
            historico = "Histórico não disponível."
        };
    }

}

<script>
    var table;

    function initializeDataTable(dotNetHelper) {

        // Função para formatar os detalhes do chamado
        function formatDetails(chamado) {
            return `
                <div class="p-3">
                    <table class="table table-sm table-bordered">
                        <tr><th>Descrição:</th><td>${chamado.descricao || 'N/A'}</td></tr>
                        <tr><th>Responsável:</th><td>${chamado.responsavel || 'N/A'}</td></tr>
                        <tr><th>Última Atualização:</th><td>${new Date(chamado.ultimaAtualizacao).toLocaleString()}</td></tr>
                        <tr><th>Histórico:</th><td>${chamado.historico || 'Sem histórico'}</td></tr>
                    </table>
                </div>
            `;
        }

        table = $('#myTable').DataTable({
            responsive: true,
            processing: true,
            order: [[7, 'asc']],
            lengthMenu: [25, 50, 100],
            stateSave: true,
            stateDuration: -1,
            language: {
                url: 'https://cdn.datatables.net/plug-ins/1.11.5/i18n/pt-BR.json'
            },
            columnDefs: [
                {
                    orderable: false,
                    render: DataTable.render.select(),
                    targets: 0
                },
                {
                    className: 'dt-control',
                    orderable: false,
                    targets: 1
                }
            ],
            select: {
                style: 'multi',
                selector: 'td:first-child',
                info: false
            },
            layout: {
                top2start: {
                    buttons: [
                        {
                            extend: 'searchPanes',
                            config: {
                                cascadePanes: true,
                                collapse: false,
                                preSelect: [
                                    {
                                        rows: ["Critico", "Importante", "Normal"],
                                        column: 5
                                    }
                                ]
                            }
                        }
                    ]
                },
                topEnd: {
                    buttons: [
                        {
                            text: "Responder Cliente",
                            action: function () {
                                var rowsSelected = table.rows({ selected: true }).data();
                                if (rowsSelected.length === 0) {
                                    alert("Nenhum chamado selecionado!");
                                    return;
                                }

                                // Coletar todos os códigos de chamado selecionados
                                var codigosChamado = [];
                                for (var i = 0; i < rowsSelected.length; i++) {
                                    codigosChamado.push(parseInt(rowsSelected[i][2]));
                                }

                                // Opção 2: Modificar o método C# para aceitar array de códigos (mais eficiente)
                                dotNetHelper.invokeMethodAsync("GetMultiplosChamadosJS", codigosChamado)
                                    .then(chamados => {
                                        console.log("Chamados encontrados:", chamados);
                                        var mensagem = "Chamados selecionados:\n\n";
                                        // Processar todos os chamados de uma vez
                                        chamados.forEach(chamado => {
                                            // Faça algo com cada chamado
                                            mensagem += `• ${chamado.codigoChamado} - ${chamado.cliente.nome} (${chamado.status})\n`;
                                        });
                                        alert(mensagem);
                                    })
                                    .catch(error => {
                                        console.error("Erro ao buscar chamados:", error);
                                    });
                            }
                        }
                    ],
                    search: {
                        search: true,
                        placeholder: 'Pesquisar'
                    }
                }
            },
        });
        // Evento para mostrar/esconder child rows
        $('#myTable tbody').on('click', 'td.dt-control', function () {
            var tr = $(this).closest('tr');
            var row = table.row(tr);
            var icon = $(this).find('i');
            var chamadoId = parseInt(tr.attr('data-id')); // Obter o ID do atributo data-id

            if (row.child.isShown()) {
                row.child.hide();
                icon.removeClass('bi-dash-circle').addClass('bi-plus-circle');
            } else {
                icon.removeClass('bi-plus-circle').addClass('bi-arrow-clockwise');

                dotNetHelper.invokeMethodAsync("GetChamadoDetalhesJS", chamadoId)
                    .then(chamado => {
                        if (chamado) {
                            row.child(formatDetails(chamado)).show();
                            icon.removeClass('bi-arrow-clockwise').addClass('bi-dash-circle');
                        } else {
                            icon.removeClass('bi-arrow-clockwise').addClass('bi-plus-circle');
                        }
                    })
                    .catch(error => {
                        console.error("Erro ao buscar detalhes:", error);
                        icon.removeClass('bi-arrow-clockwise').addClass('bi-plus-circle');
                    });
            }
        });
    }
</script>