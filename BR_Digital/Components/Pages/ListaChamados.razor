@page "/lista-chamados"
@rendermode InteractiveServer

<PageTitle>Lista de chamados</PageTitle>

<table class="table table-bordered table-hover table-sm">
    <thead>
        <tr>
            <th>Chamado</th>
            <th>Cliente</th>
            <th>Trecho</th>
            <th>Status</th>
            <th>Tipo</th>
            <th>Abertura</th>
            <th>Interação</th>
            <th>Opções</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Chamado chamado in ListaChamado)
        {
            <tr class="@GetRowsColor(chamado.Status)">
                <td>@chamado.CodigoChamado</td>
                <td>@chamado.Cliente.Nome</td>
                <td>@chamado.Trecho</td>
                <td>@chamado.Status</td>
                <td>@chamado.Tipo</td>
                <td>@chamado.Abertura</td>
                <td>@chamado.Interacao</td>
                <td>
                    <button type="button" class="btn btn-primary btn-sm" title="Editar"><i class="bi bi-pencil-square"></i></button>
                    <button type="button" class="btn btn-danger btn-sm" title="Apagar" onclick="modalConfirm()"><i class="bi bi-trash3"></i></button>
                    <button type="button" class="btn btn-danger btn-sm" title="Apagar" onclick="modalConfirm()"><i class="bi bi-trash3"></i></button>

                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    public List<Chamado> ListaChamado { get; set; } = new();

    protected override void OnInitialized()
    {
        PopularListaChamado();
    }

    // TODO: Passar esse metodo para o repository e chamar ele na inicialização da aplicação
    private void PopularListaChamado()
    {
        var rand = new Random();
        var clientes = new[] { new Cliente("VIVO"), new Cliente("TIM"), new Cliente("CLARO"), new Cliente("OI") };
        var tiposChamado = new[] { TipoChamado.Backbone_Tx, TipoChamado.Backbone_Rx };
        var statusChamado = new[] { StatusChamado.StatusTeste, StatusChamado.StatusTeste2, StatusChamado.StatusTeste3 };

        for (int i = 0; i < 100; i++)
        {
            var cliente = clientes[rand.Next(0, clientes.Length)];
            var tipoChamado = tiposChamado[rand.Next(0, tiposChamado.Length)];
            var status = statusChamado[rand.Next(0, statusChamado.Length)];
            var data = new DateTime(rand.Next(2020, 2026), rand.Next(1, 13), rand.Next(1, 29), rand.Next(0, 24), rand.Next(0, 60), rand.Next(0, 60), DateTimeKind.Local);

            var chamado = new Chamado(cliente, "este / aquele", tipoChamado, status, data);
            ListaChamado.Add(chamado);
        }
    }

    private string GetRowsColor(StatusChamado status)
    {
        return status switch
        {
            StatusChamado.StatusTeste => "table-warning",
            StatusChamado.StatusTeste2 => "table-danger",
            _ => ""
        };
    }
}

<script>
    function modalConfirm(){
        confirm("Teste");
    };
</script>